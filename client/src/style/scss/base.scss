// Bootstrap variables and core framework
@import "~bootstrap/scss/_functions.scss";
@import "theme/blue.scss";
@import "~bootstrap/scss/bootstrap.scss";
@import "~bootstrap-vue/src/index.scss";

// Bootstrap-related style overrides
@import "overrides.scss";

// Fontawesome configuration.
//$fa-font-path: "../../../node_modules/font-awesome/fonts/";
//@import "../../../node_modules/font-awesome/scss/font-awesome.scss";

$fa-font-path: "../../../node_modules/@fortawesome/fontawesome-free/webfonts/";
@import "~@fortawesome/fontawesome-free/scss/fontawesome";
@import "~@fortawesome/fontawesome-free/scss/brands";
@import "~@fortawesome/fontawesome-free/scss/regular";
@import "~@fortawesome/fontawesome-free/scss/solid";
@import "~@fortawesome/fontawesome-free/scss/v4-shims";
@import "~@fortawesome/fontawesome-free/scss/_variables";

@import "select2.scss";
@import "jquery.rating.scss";

// galaxy sub-components
@import "reports";
@import "windows.scss";
@import "upload.scss";
@import "ui.scss";
@import "library.scss";
@import "trackster.scss";
@import "toastr.scss";
@import "jstree.scss";
@import "tour.scss";
@import "flex.scss";
@import "charts.scss";
@import "message.scss";
@import "markdown.scss";
@import "toolshed.scss";
@import "workflow.scss";
@import "multiselect.scss";

// ==== Select2 ====
/* fix for zero width select2 - remove when fixed there */
.select2-minwidth {
    min-width: 256px;
}
.select2-drop-active,
.select2-drop-above.select2-drop-active {
    border: $border-default;
    .select2-search {
        @extend .pt-1;
    }
}
.select2-drop {
    background: $body-bg;
    color: $text-color;
}

// ==== Mixins ====
@mixin user-select($select) {
    -webkit-touch-callout: #{$select};
    @each $pre in -webkit-, -moz-, -ms-, -o-, -khtml- {
        #{$pre + user-select}: #{$select};
    }
    #{user-select}: #{$select};
}

@mixin border-radius($radius) {
    // from font-awesome 3.0
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

// ==== Basic styles ====

body {
    @extend .m-2;
}

.unselectable {
    @include user-select(none);
}

.parent-width {
    @extend .w-100;
}

.clear {
    @include clearfix();
}

.text-normalwrap {
    word-wrap: normal;
}

// ==== Page layout styles ====

.full-content {
    @extend .m-0;
    @extend .p-0;
    @extend .w-100;
    @extend .h-100;
    @extend .position-absolute;
    background: $body-bg;
    color: $text-color;
}

.full-message {
    @extend .w-100;
    @extend .overflow-hidden;
    height: $panel-message-height !important;
    border-bottom: solid $border-color 1px;
    font-size: 90%;
    display: none;
}

#everything {
    @extend .d-flex;
    @extend .flex-column;
    @extend .full-content;
    top: 0px;
    left: 0px;
}

#columns {
    @extend .position-relative;
    flex: 1;
    overflow: hidden;
}

#background {
    @extend .full-content;
    z-index: -1;
}

// Used for dragging panels, popup menus, to deal with capturing clicks in iframes
#dd-helper {
    @extend .full-content;
    opacity: 0;
    z-index: 900; // Bootstrap elements start at 1000
    display: none;
}

// ==== Panel layout styles ====

#left,
#center,
#right {
    @extend .position-absolute;
    @extend .h-100;
}
#left {
    @extend .unified-panel;
    left: 0px;
    width: $panel-width;
    overflow: unset !important;
}
#right {
    @extend .unified-panel;
    right: 0px;
    width: $panel-width;
    overflow: unset !important;
}
#right > .unified-panel-footer {
    .drag {
        left: 0;
    }
}
#center {
    left: $panel-width;
    right: $panel-width;
    .center-container {
        @extend .position-absolute;
        @extend .w-100;
        @extend .h-100;
        .center-panel {
            @extend .position-absolute;
            @extend .w-100;
            @extend .h-100;
            @extend .overflow-auto;
            display: none;
            padding: $margin-h $margin-v;
            background: $white;
        }
        .center-frame {
            @extend .position-absolute;
            @extend .w-100;
            @extend .h-100;
        }
    }
    // Replaces unnecessary if/then logic in base_panels.mako
    &:first-child {
        left: 0;
    }
    &:last-child {
        right: 0;
    }
}

// ==== Unified panel styles ====
.unified-panel {
    display: flex;
    flex-flow: column;
    background: $panel-bg-color;
    height: 100%;
    overflow: auto;
}
.unified-panel-header {
    @extend .unselectable;
    @extend .px-3;
    @extend .d-flex;
    height: $panel_header_height;
    font-size: 1rem;
    font-weight: bold;
    align-items: center;
    color: $panel-header-text-color;
    background: $panel-bg-header-color;
    a {
        color: $panel-header-text-color;
    }
    .unified-panel-header-inner {
        @extend .w-100;
        min-width: max-content;
        align-items: center;
        justify-content: space-between;
        display: flex;
    }
    .panel-header-buttons {
        order: 9999;
        @extend .d-flex;
        .panel-header-button {
            text-align: center;
            &:not(:last-child) {
                @extend .mr-2;
            }
            &:hover {
                color: $brand-info;
            }
        }
        .panel-header-button-toolbox {
            color: $brand-dark;
            flex: 1;
            @extend .p-1;
            text-align: center;
            font-size: $h4-font-size;
            align-items: center;
            &:hover {
                color: $brand-info;
                background-color: $brand-light;
                text-decoration: none !important;
                border-color: $brand-light;
            }
        }
    }
}
.unified-panel-controls {
    @extend .px-3;
}
.unified-panel-body {
    @extend .p-0;
    @extend .w-100;
    @extend .h-100;
    @extend .overflow-auto;
    flex: 1;
}
.unified-panel-body-background {
    background: none repeat scroll 0 0 $panel-bg-color;
}
.unified-panel-footer {
    @extend .unselectable;
    position: relative;
    height: $panel_footer_height;
    line-height: $panel_footer_height;
    width: 100%;
    background: $panel-footer-bg-color;
    color: $panel-header-text-color;
    a {
        color: $panel-header-text-color;
    }
    .drag {
        position: absolute;
        top: 0;
        right: 0;
        padding: 0 5px;
        text-align: center;
        height: $panel_footer_height;
        width: $panel_footer_height - 5;
        background-image: url(../../assets/images/visualization/draggable_horizontal.png);
        background-repeat: no-repeat;
        background-position: 50% 50%;
        cursor: col-resize;
    }
}

// Needs to be outside panel to show when hidden
.panel-collapse {
    @extend .fa;
    $border-color: darken($panel-footer-bg-color, 20%);
    font-size: 4/3em;
    cursor: pointer;
    display: block;
    position: fixed;
    text-align: center;
    height: $panel_footer_height;
    line-height: $panel_footer_height;
    width: $panel_footer_height;
    background: $panel-footer-bg-color;
    border: solid $panel-footer-bg-color 1px;
    z-index: 1;
    &.right {
        right: 0;
        border-top-left-radius: $border-radius-base;
        line-height: inherit;
        &:before {
            content: "\f054";
        }
        &.hidden:before {
            content: "\f053";
        }
        &.hidden {
            border-top-color: $border-color;
            border-left-color: $border-color;
        }
    }
    &.left {
        left: 0;
        border-top-right-radius: $border-radius-base;
        line-height: inherit;
        &:before {
            content: "\f053";
        }
        &.hidden:before {
            content: "\f054";
        }
        &.hidden {
            border-top-color: $border-color;
            border-right-color: $border-color;
        }
    }
}

// ==== Masthead ====
#masthead {
    @extend .p-0;
    @extend .mb-0;
    background-color: $brand-masthead;
    height: $masthead-height;
    .navbar-nav {
        height: $masthead-height;
        > li {
            // This allows the background color to fill the full height of the
            // masthead, while still keeping the contents centered (using flex)
            min-height: 100%;
            display: flex;
            align-items: center;
            &.active {
                background: darken($brand-masthead, 10%);
            }
            .nav-link {
                position: relative;
                cursor: pointer;
                text-decoration: none;
                color: $brand-masthead-text;
                &:hover {
                    color: $brand-masthead-text-hover;
                }
                &.nav-icon {
                    font-size: 1.3em;
                    .nav-note {
                        @extend .font-weight-bold;
                        @extend .position-absolute;
                        left: 1.9rem;
                        top: 1.9rem;
                        font-size: 0.6rem;
                    }
                }
                &.toggle {
                    color: $brand-masthead-text-hover;
                }
            }
        }
    }
    .navbar-brand {
        @extend .position-absolute;
        @extend .font-weight-bold;
        font-family: Verdana, sans-serif;
        font-size: 1.25rem;
        left: 0.8rem;
        line-height: 0rem;
        color: $brand-masthead-text-active;
        text-decoration: none;
        .navbar-brand-image {
            display: inline;
            margin-right: 0.3rem;
            border: none;
            max-height: 2rem;
        }
        .navbar-brand-title {
            color: $brand-masthead-text;
        }
    }
}

// State colors

$galaxy-state-border: (
    "new": $state-default-border,
    "upload": $state-info-border,
    "waiting": $state-default-border,
    "queued": $state-default-border,
    "running": $state-running-border,
    "ok": $state-success-border,
    "error": $state-danger-border,
    "deleted": darken($state-default-border, 30%),
    "hidden": $state-default-border,
);

$galaxy-state-bg: (
    "new": $state-default-bg,
    "upload": $state-info-bg,
    "waiting": $state-default-bg,
    "queued": $state-default-bg,
    "running": $state-running-bg,
    "ok": $state-success-bg,
    "error": $state-danger-bg,
    "deleted": darken($state-default-bg, 30%),
    "hidden": $state-default-bg,
);

@each $state in map-keys($galaxy-state-border) {
    .state-color-#{$state},
    [data-state="#{$state}"] {
        border-color: map-get($galaxy-state-border, $state);
        background-color: map-get($galaxy-state-bg, $state);

        &:focus,
        &:focus-within {
            background-color: scale-color(map-get($galaxy-state-bg, $state), $lightness: -10%);
        }

        &.selected {
            background-color: $state-info-bg;
            &:focus,
            &:focus-within {
                background-color: scale-color($state-info-bg, $lightness: -10%);
            }
        }
    }
}

.state-color-deleted,
.state-color-hidden,
[data-state="deleted"],
[data-state="hidden"] {
    border-style: dotted;
}

// Extra label colors
.badge-beta {
    @extend .badge-warning;
}

.badge-new {
    @extend .badge-info;
}

// Button styles

button {
    @extend .btn;
    @extend .btn-secondary;
}
a.btn {
    text-decoration: none;
}

.btn-xs {
    // The 'new' bootstrap 4 btn-sm is about the same size as the old btn-xs,
    // should serve as a replacement for anything expecting this.
    @extend .btn-sm;
}

.btn-default {
    // A hopefully temporary alias (as with above) to provide backwards
    // compatibility for external stuff using .btn-default, which is now
    // .btn-secondary.
    @extend .btn-secondary;
}

.btn-transparent-background {
    // A wrapper for buttons with transparent background when hovering over it.
    .btn {
        background-color: transparent !important;
        border-color: transparent !important;
    }

    .btn:hover {
        color: $brand-info;
    }

    .btn:active {
        color: $brand-dark;
    }
}

/* For Vue */
[v-cloak] {
    display: none;
}

@import "unsorted.scss";
